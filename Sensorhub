import paho.mqtt.client as mqttclient 
import smbus
import time
import json 
import time
import datetime
import socket 



def on_connect(client,userdata,flags,rc): 
        if rc==0:
                print("client is connected")
                global connected
                connected=True
        else:
                print("connection failed") 

connected=False 
broker_address="broker.digitalhhz.smartlab.local"
port=1883
user="HHZ"
password="password"

DEVICE_BUS = 1
DEVICE_ADDR = 0x17
 
TEMP_REG = 0x01
LIGHT_REG_L = 0x02
LIGHT_REG_H = 0x03
STATUS_REG = 0x04
ON_BOARD_TEMP_REG = 0x05
ON_BOARD_HUMIDITY_REG = 0x06
ON_BOARD_SENSOR_ERROR = 0x07
BMP280_TEMP_REG = 0x08
BMP280_PRESSURE_REG_L = 0x09
BMP280_PRESSURE_REG_M = 0x0A
BMP280_PRESSURE_REG_H = 0x0B
BMP280_STATUS = 0x0C
HUMAN_DETECT = 0x0D

temp = []

bus = smbus.SMBus(DEVICE_BUS)

aReceiveBuf = []

aReceiveBuf.append(0x00) #Platzhalter


client=mqttclient.Client("MQTT")

client.username_pw_set(user,password=password)
client.on_connect=on_connect
client.connect(broker_address,port=port)
client.loop_start()



while connected!=True: 
        time.sleep(0.2)

while True:

        del aReceiveBuf[0x01:]

        current_utc_time = datetime.datetime.utcnow()
        

        
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.connect(("8.8.8.8", 80))
#       print(s.getsockname()[0])
#       s.close()

        for i in range(TEMP_REG,HUMAN_DETECT + 1):
                aReceiveBuf.append(bus.read_byte_data(DEVICE_ADDR, i))

                if aReceiveBuf[STATUS_REG] & 0x01 :
                print("Off-chip temperature sensor overrange!")
        elif aReceiveBuf[STATUS_REG] & 0x02 :
                print("No external temperature sensor!")
        else :
                print("Current off-chip sensor temperature = %d Celsius" % aReceiveBuf[TEMP_REG])

        
        if aReceiveBuf[STATUS_REG] & 0x04 :
                print("Onboard brightness sensor overrange!")
        elif aReceiveBuf[STATUS_REG] & 0x08 :
                print("Onboard brightness sensor failure!")
        else :
                print("Current onboard sensor brightness = %d Lux" % (aReceiveBuf[LIGHT_REG_H] << 8 | aReceiveBuf[LIGHT_REG_L]))

        

        print("Current onboard sensor temperature = %d Celsius" % aReceiveBuf[ON_BOARD_TEMP_REG])
        print("Current onboard sensor humidity = %d %%" % aReceiveBuf[ON_BOARD_HUMIDITY_REG])

        if aReceiveBuf[ON_BOARD_SENSOR_ERROR] != 0 :
                print("Onboard temperature and humidity sensor data may not be up to date!")

        if aReceiveBuf[BMP280_STATUS] == 0 :
                print("Current barometer temperature = %d Celsius" % aReceiveBuf[BMP280_TEMP_REG])
                print("Current barometer pressure = %d pascal" % (aReceiveBuf[BMP280_PRESSURE_REG_L] | aReceiveBuf[BMP280_PRESSURE_REG_M] << 8 | aReceiveBuf[BMP280_PRESSURE_REG_H] << 16))

        else :
                print("Onboard barometer works abnormally!")

        if aReceiveBuf[HUMAN_DETECT] == 1 :
                print("Live Body detected")
        else:
                print("No Body detected")
        
        
        print (aReceiveBuf)

        json_topics= "DHHZ/228/entryAreaTv1/PIZEROONE"

        json_payload={

               "temp": aReceiveBuf[TEMP_REG],
               "brightness": aReceiveBuf[LIGHT_REG_H] << 8 | aReceiveBuf[LIGHT_REG_L], 
               "BoardTemp": aReceiveBuf[ON_BOARD_TEMP_REG],
               "Humidity": aReceiveBuf[ON_BOARD_HUMIDITY_REG],
               "BardoTemp": aReceiveBuf[BMP280_TEMP_REG],
               "BaroPressure": (aReceiveBuf[BMP280_PRESSURE_REG_L] | aReceiveBuf[BMP280_PRESSURE_REG_M] << 8 | aReceiveBuf[BMP280_PRESSURE_REG_H] << 16), 
               "MotionSensor":aReceiveBuf[HUMAN_DETECT],
               "Timestamp": current_utc_time.strftime('%Y-%m-%dT%H:%M:%SZ'),
               "Status" : s.getsockname()[0]
                 }       
        json_string = json.dumps(json_payload)


        client.publish(json_topics, json_string)
        
        s.close()

        time.sleep(5)          
